const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã URL –≤ —Ñ–∞–π–ª–µ
function replaceUrlsInFile(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let hasChanges = false;

    // P2P —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    const p2pReplacements = [

    ];

    // IslamFinans —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    const islamfinansReplacements = [

    ];

    // BankCredit —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    const bankcreditReplacements = [

    ];

    // Autocredit —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    const autocreditReplacements = [
    ];

    // Feedback widget
    const feedbackReplacements = [
    ];

    // About —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    const aboutReplacements = [
    ];

    // Trust widget
    const trustReplacements = [
    ];

    // Zain checker widget
    const zainCheckerReplacements = [
    ];

    // BusinessCredit —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    const businesscreditReplacements = [
    ];

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∑–∞–º–µ–Ω—ã
    const allReplacements = [
      ...p2pReplacements,
      ...islamfinansReplacements,
      ...bankcreditReplacements,
      ...autocreditReplacements,
      ...feedbackReplacements,
      ...aboutReplacements,
      ...trustReplacements,
      ...zainCheckerReplacements,
      ...businesscreditReplacements
    ];

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
    allReplacements.forEach(replacement => {
      if (content.includes(replacement.from)) {
        content = content.replace(new RegExp(replacement.from.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), replacement.to);
        hasChanges = true;
      }
    });

    // –ó–∞–º–µ–Ω—è–µ–º background URL
    const backgroundReplacements = [
    ];

    backgroundReplacements.forEach(replacement => {
      if (content.includes(replacement.from)) {
        content = content.replace(new RegExp(replacement.from.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), replacement.to);
        hasChanges = true;
      }
    });

    if (hasChanges) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: ${filePath}`);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message);
  }
}

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
const filesToProcess = [
  'src/screens/P2P/index.tsx',
  'src/screens/IslamFinans/index.tsx',
  'src/screens/BankCredit/index.tsx',
  'src/screens/Autocredit/index.tsx',
  'src/widgets/feedback.tsx',
  'src/screens/About/index.tsx',
  'src/widgets/trust.tsx',
  'src/widgets/zain-checker.tsx',
  'src/screens/BusinessCredit/index.tsx'
];

console.log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–º–µ–Ω—É –≤–Ω–µ—à–Ω–∏—Ö URL –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏...');

filesToProcess.forEach(filePath => {
  if (fs.existsSync(filePath)) {
    replaceUrlsInFile(filePath);
  } else {
    console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
  }
});

console.log('üéâ –ó–∞–º–µ–Ω–∞ URL –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'); 