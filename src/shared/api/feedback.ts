export type FeedbackFormData = {
  name: string;
  phone: string;
  email: string;
  comment?: string;
  pageTitle: string;
};

export type FeedbackResponse = {
  success: boolean;
  message?: string;
  error?: string;
  emailResponse?: string;
};

export const sendFeedback = async (
  data: FeedbackFormData,
): Promise<FeedbackResponse> => {
  try {
    const BOT_TOKEN = import.meta.env.VITE_TELEGRAM_BOT_TOKEN;
    const CHAT_ID = import.meta.env.VITE_TELEGRAM_CHAT_ID;

    if (!BOT_TOKEN || !CHAT_ID) {
      throw new Error('Telegram credentials not configured');
    }

    const message =
      `üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞*\n\n` +
      `üë§ *–ò–º—è:* ${data.name}\n` +
      `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${data.phone}\n` +
      `üìß *Email:* ${data.email}\n` +
      `üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${data.comment || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
      `üåê *–°—Ç—Ä–∞–Ω–∏—Ü–∞:* ${data.pageTitle}\n` +
      `‚è∞ *–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU')}`;

    const response = await fetch(
      `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: CHAT_ID,
          text: message,
          parse_mode: 'Markdown',
        }),
      },
    );

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();

    if (result.ok) {
      return {
        success: true,
        message: '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram',
      };
    } else {
      throw new Error(result.description || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã:', error);
    throw error;
  }
};
